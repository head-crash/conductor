openapi: 3.0.0
info:
  title: API Documentation
  description: This is the REST API documentation for the conductor oauth server.
  version: 1.0.0
tags: 
  - name: oauth
    description: oauth 2.0 operations
  - name: users
    description: user related operations
  - name: clients
    description: client related operations
servers:
  - url: http://localhost:8080
    description: Local server
paths:
  /oauth/token:
    get:
      summary: Request token
      tags:
        - oauth
      parameters:
        - name: authorization_code
          in: query
          required: true
          schema:
            type: string
      security:
        - basicAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponseBody"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
  /oauth/login:
    post:
      summary: Authenticate user
      tags:
        - oauth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LoginRequestBody"
      responses:
        "302":
          description: Successful authentication and redirection
          headers:
            Location:
              description: URL of the redirection
              schema:
                type: string
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
    get:
      summary: Display login page
      tags:
        - oauth
      responses:
        "200":
          description: Login page displayed successfully
          content:
            text/html:
              schema:
                type: string
  /users:
    post:
      summary: Create user
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestBody"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseBody"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseBody"
  /clients:
    post:
      summary: Create a new client
      tags:
        - clients
      requestBody:
        description: Request body for creating a new client
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientRequestBody"
      responses:
        "201":
          description: Client created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid request body
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: A user with that email already exists
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Secret encryption failed
components:
  schemas:
    TokenResponseBody:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: string
          format: date-time
    CreateUserRequestBody:
      type: object
      properties:
        password:
          type: string
        email:
          type: string
    UserResponseBody:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
    LoginRequestBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        client_id:
          type: string
        scope:
          type: string
        state:
          type: string
    ErrorResponseBody:
      type: object
      properties:
        error:
          type: string
    CreateClientRequestBody:
      type: object
      properties:
        secret:
          type: string
          example: mysecretpassword
        redirectUrl:
          type: string
          example: http://example.com/callback
      required:
        - secret
        - redirectUrl
    ClientResponseBody:
      type: object
      properties:
        client_id:
          type: string
        client_name:
          type: string
        created_at:
          type: string
          format: date-time
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []